{
    "dataType": "CVE_RECORD",
    "dataVersion": "5.1",
    "cveMetadata": {
        "cveId": "CVE-2024-26706",
        "assignerOrgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
        "state": "PUBLISHED",
        "assignerShortName": "Linux",
        "dateReserved": "2024-02-19T14:20:24.158Z",
        "datePublished": "2024-04-03T14:55:09.529Z",
        "dateUpdated": "2024-07-05T12:31:48.129Z"
    },
    "containers": {
        "cna": {
            "providerMetadata": {
                "orgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
                "shortName": "Linux",
                "dateUpdated": "2024-05-29T05:21:12.439Z"
            },
            "descriptions": [
                {
                    "lang": "en",
                    "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nparisc: Fix random data corruption from exception handler\n\nThe current exception handler implementation, which assists when accessing\nuser space memory, may exhibit random data corruption if the compiler decides\nto use a different register than the specified register %r29 (defined in\nASM_EXCEPTIONTABLE_REG) for the error code. If the compiler choose another\nregister, the fault handler will nevertheless store -EFAULT into %r29 and thus\ntrash whatever this register is used for.\nLooking at the assembly I found that this happens sometimes in emulate_ldd().\n\nTo solve the issue, the easiest solution would be if it somehow is\npossible to tell the fault handler which register is used to hold the error\ncode. Using %0 or %1 in the inline assembly is not posssible as it will show\nup as e.g. %r29 (with the \"%r\" prefix), which the GNU assembler can not\nconvert to an integer.\n\nThis patch takes another, better and more flexible approach:\nWe extend the __ex_table (which is out of the execution path) by one 32-word.\nIn this word we tell the compiler to insert the assembler instruction\n\"or %r0,%r0,%reg\", where %reg references the register which the compiler\nchoosed for the error return code.\nIn case of an access failure, the fault handler finds the __ex_table entry and\ncan examine the opcode. The used register is encoded in the lowest 5 bits, and\nthe fault handler can then store -EFAULT into this register.\n\nSince we extend the __ex_table to 3 words we can't use the BUILDTIME_TABLE_SORT\nconfig option any longer."
                }
            ],
            "affected": [
                {
                    "product": "Linux",
                    "vendor": "Linux",
                    "defaultStatus": "unaffected",
                    "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
                    "programFiles": [
                        "arch/parisc/Kconfig",
                        "arch/parisc/include/asm/assembly.h",
                        "arch/parisc/include/asm/extable.h",
                        "arch/parisc/include/asm/special_insns.h",
                        "arch/parisc/include/asm/uaccess.h",
                        "arch/parisc/kernel/cache.c",
                        "arch/parisc/kernel/unaligned.c",
                        "arch/parisc/mm/fault.c"
                    ],
                    "versions": [
                        {
                            "version": "1da177e4c3f4",
                            "lessThan": "23027309b099",
                            "status": "affected",
                            "versionType": "git"
                        },
                        {
                            "version": "1da177e4c3f4",
                            "lessThan": "fa69a8063f8b",
                            "status": "affected",
                            "versionType": "git"
                        },
                        {
                            "version": "1da177e4c3f4",
                            "lessThan": "ce31d79aa1f1",
                            "status": "affected",
                            "versionType": "git"
                        },
                        {
                            "version": "1da177e4c3f4",
                            "lessThan": "8b1d72395635",
                            "status": "affected",
                            "versionType": "git"
                        }
                    ]
                },
                {
                    "product": "Linux",
                    "vendor": "Linux",
                    "defaultStatus": "affected",
                    "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
                    "programFiles": [
                        "arch/parisc/Kconfig",
                        "arch/parisc/include/asm/assembly.h",
                        "arch/parisc/include/asm/extable.h",
                        "arch/parisc/include/asm/special_insns.h",
                        "arch/parisc/include/asm/uaccess.h",
                        "arch/parisc/kernel/cache.c",
                        "arch/parisc/kernel/unaligned.c",
                        "arch/parisc/mm/fault.c"
                    ],
                    "versions": [
                        {
                            "version": "6.1.79",
                            "lessThanOrEqual": "6.1.*",
                            "status": "unaffected",
                            "versionType": "custom"
                        },
                        {
                            "version": "6.6.18",
                            "lessThanOrEqual": "6.6.*",
                            "status": "unaffected",
                            "versionType": "custom"
                        },
                        {
                            "version": "6.7.6",
                            "lessThanOrEqual": "6.7.*",
                            "status": "unaffected",
                            "versionType": "custom"
                        },
                        {
                            "version": "6.8",
                            "lessThanOrEqual": "*",
                            "status": "unaffected",
                            "versionType": "original_commit_for_fix"
                        }
                    ]
                }
            ],
            "references": [
                {
                    "url": "https://git.kernel.org/stable/c/23027309b099ffc4efca5477009a11dccbdae592"
                },
                {
                    "url": "https://git.kernel.org/stable/c/fa69a8063f8b27f3c7434a0d4f464a76a62f24d2"
                },
                {
                    "url": "https://git.kernel.org/stable/c/ce31d79aa1f13a2345791f84935281a2c194e003"
                },
                {
                    "url": "https://git.kernel.org/stable/c/8b1d72395635af45410b66cc4c4ab37a12c4a831"
                }
            ],
            "title": "parisc: Fix random data corruption from exception handler",
            "x_generator": {
                "engine": "bippy-a5840b7849dd"
            }
        },
        "adp": [
            {
                "providerMetadata": {
                    "orgId": "96f1cf3c-f80a-4e0f-a063-99a91e3f1325",
                    "shortName": "secretariat-reference",
                    "dateUpdated": "2024-07-05T12:31:48.129Z"
                },
                "references": [
                    {
                        "url": "https://git.kernel.org/stable/c/23027309b099ffc4efca5477009a11dccbdae592/DEMO_2024_06_19",
                        "tags": [
                            "x_cve_prog_secretariat_snapshot"
                        ]
                    },
                    {
                        "url": "https://git.kernel.org/stable/c/fa69a8063f8b27f3c7434a0d4f464a76a62f24d2/DEMO_2024_06_19",
                        "tags": [
                            "x_cve_prog_secretariat_snapshot"
                        ]
                    },
                    {
                        "url": "https://git.kernel.org/stable/c/ce31d79aa1f13a2345791f84935281a2c194e003/DEMO_2024_06_19",
                        "tags": [
                            "x_cve_prog_secretariat_snapshot"
                        ]
                    },
                    {
                        "url": "https://git.kernel.org/stable/c/8b1d72395635af45410b66cc4c4ab37a12c4a831/DEMO_2024_06_19",
                        "tags": [
                            "x_cve_prog_secretariat_snapshot"
                        ]
                    },
                    {
                        "url": "https://git.kernel.org/stable/c/23027309b099ffc4efca5477009a11dccbdae592/adp-test-6-28",
                        "tags": [
                            "x_snapshot"
                        ]
                    },
                    {
                        "url": "https://git.kernel.org/stable/c/fa69a8063f8b27f3c7434a0d4f464a76a62f24d2/adp-test-6-28",
                        "tags": [
                            "x_snapshot"
                        ]
                    },
                    {
                        "url": "https://git.kernel.org/stable/c/ce31d79aa1f13a2345791f84935281a2c194e003/adp-test-6-28",
                        "tags": [
                            "x_snapshot"
                        ]
                    },
                    {
                        "url": "https://git.kernel.org/stable/c/8b1d72395635af45410b66cc4c4ab37a12c4a831/adp-test-6-28",
                        "tags": [
                            "x_snapshot"
                        ]
                    }
                ]
            }
        ]
    }
}